//  alpaca package
//
//  Author: S.Hamblett <steve.hamblett@linux.com>
//  Copyright Â© 2023 S. Hamblett
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names, unused_element, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Holds ffigen generated implementation bindings to the Alpaca ggml library.
class GgmlImpl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GgmlImpl(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GgmlImpl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  double ggml_fp16_to_fp32(
    int x,
  ) {
    return _ggml_fp16_to_fp32(
      x,
    );
  }

  late final _ggml_fp16_to_fp32Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ggml_fp16_t)>>(
          'ggml_fp16_to_fp32');
  late final _ggml_fp16_to_fp32 =
      _ggml_fp16_to_fp32Ptr.asFunction<double Function(int)>();

  int ggml_fp32_to_fp16(
    double x,
  ) {
    return _ggml_fp32_to_fp16(
      x,
    );
  }

  late final _ggml_fp32_to_fp16Ptr =
      _lookup<ffi.NativeFunction<ggml_fp16_t Function(ffi.Float)>>(
          'ggml_fp32_to_fp16');
  late final _ggml_fp32_to_fp16 =
      _ggml_fp32_to_fp16Ptr.asFunction<int Function(double)>();

  void ggml_time_init() {
    return _ggml_time_init();
  }

  late final _ggml_time_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_time_init');
  late final _ggml_time_init = _ggml_time_initPtr.asFunction<void Function()>();

  int ggml_time_ms() {
    return _ggml_time_ms();
  }

  late final _ggml_time_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_ms');
  late final _ggml_time_ms = _ggml_time_msPtr.asFunction<int Function()>();

  int ggml_time_us() {
    return _ggml_time_us();
  }

  late final _ggml_time_usPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_us');
  late final _ggml_time_us = _ggml_time_usPtr.asFunction<int Function()>();

  int ggml_cycles() {
    return _ggml_cycles();
  }

  late final _ggml_cyclesPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles');
  late final _ggml_cycles = _ggml_cyclesPtr.asFunction<int Function()>();

  int ggml_cycles_per_ms() {
    return _ggml_cycles_per_ms();
  }

  late final _ggml_cycles_per_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles_per_ms');
  late final _ggml_cycles_per_ms =
      _ggml_cycles_per_msPtr.asFunction<int Function()>();

  void ggml_print_object(
    ffi.Pointer<ggml_object> obj,
  ) {
    return _ggml_print_object(
      obj,
    );
  }

  late final _ggml_print_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_object>)>>(
          'ggml_print_object');
  late final _ggml_print_object = _ggml_print_objectPtr
      .asFunction<void Function(ffi.Pointer<ggml_object>)>();

  void ggml_print_objects(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_print_objects(
      ctx,
    );
  }

  late final _ggml_print_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_print_objects');
  late final _ggml_print_objects = _ggml_print_objectsPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>)>();

  int ggml_nelements(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nelements(
      tensor,
    );
  }

  late final _ggml_nelementsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nelements');
  late final _ggml_nelements =
      _ggml_nelementsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_nbytes(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nbytes(
      tensor,
    );
  }

  late final _ggml_nbytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nbytes');
  late final _ggml_nbytes =
      _ggml_nbytesPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_blck_size(
    int type,
  ) {
    return _ggml_blck_size(
      type,
    );
  }

  late final _ggml_blck_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'ggml_blck_size');
  late final _ggml_blck_size =
      _ggml_blck_sizePtr.asFunction<int Function(int)>();

  int ggml_type_size(
    int type,
  ) {
    return _ggml_type_size(
      type,
    );
  }

  late final _ggml_type_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Int32)>>(
          'ggml_type_size');
  late final _ggml_type_size =
      _ggml_type_sizePtr.asFunction<int Function(int)>();

  double ggml_type_sizef(
    int type,
  ) {
    return _ggml_type_sizef(
      type,
    );
  }

  late final _ggml_type_sizefPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32)>>(
          'ggml_type_sizef');
  late final _ggml_type_sizef =
      _ggml_type_sizefPtr.asFunction<double Function(int)>();

  int ggml_element_size(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_element_size(
      tensor,
    );
  }

  late final _ggml_element_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_element_size');
  late final _ggml_element_size = _ggml_element_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_context> ggml_init(
    ggml_init_params params,
  ) {
    return _ggml_init(
      params,
    );
  }

  late final _ggml_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_context> Function(ggml_init_params)>>('ggml_init');
  late final _ggml_init = _ggml_initPtr
      .asFunction<ffi.Pointer<ggml_context> Function(ggml_init_params)>();

  void ggml_free(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_free(
      ctx,
    );
  }

  late final _ggml_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_free');
  late final _ggml_free =
      _ggml_freePtr.asFunction<void Function(ffi.Pointer<ggml_context>)>();

  int ggml_used_mem(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_used_mem(
      ctx,
    );
  }

  late final _ggml_used_memPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_used_mem');
  late final _ggml_used_mem =
      _ggml_used_memPtr.asFunction<int Function(ffi.Pointer<ggml_context>)>();

  int ggml_set_scratch(
    ffi.Pointer<ggml_context> ctx,
    ggml_scratch scratch,
  ) {
    return _ggml_set_scratch(
      ctx,
      scratch,
    );
  }

  late final _ggml_set_scratchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ggml_context>, ggml_scratch)>>('ggml_set_scratch');
  late final _ggml_set_scratch = _ggml_set_scratchPtr
      .asFunction<int Function(ffi.Pointer<ggml_context>, ggml_scratch)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int n_dims,
    ffi.Pointer<ffi.Int> ne,
  ) {
    return _ggml_new_tensor(
      ctx,
      type,
      n_dims,
      ne,
    );
  }

  late final _ggml_new_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Int32, ffi.Int, ffi.Pointer<ffi.Int>)>>('ggml_new_tensor');
  late final _ggml_new_tensor = _ggml_new_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_1d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
  ) {
    return _ggml_new_tensor_1d(
      ctx,
      type,
      ne0,
    );
  }

  late final _ggml_new_tensor_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Int32, ffi.Int)>>('ggml_new_tensor_1d');
  late final _ggml_new_tensor_1d = _ggml_new_tensor_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_2d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
    int ne1,
  ) {
    return _ggml_new_tensor_2d(
      ctx,
      type,
      ne0,
      ne1,
    );
  }

  late final _ggml_new_tensor_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Int32, ffi.Int, ffi.Int)>>('ggml_new_tensor_2d');
  late final _ggml_new_tensor_2d = _ggml_new_tensor_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_3d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_new_tensor_3d(
      ctx,
      type,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_new_tensor_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Int32, ffi.Int, ffi.Int, ffi.Int)>>('ggml_new_tensor_3d');
  late final _ggml_new_tensor_3d = _ggml_new_tensor_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_4d(
    ffi.Pointer<ggml_context> ctx,
    int type,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_new_tensor_4d(
      ctx,
      type,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_new_tensor_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_new_tensor_4d');
  late final _ggml_new_tensor_4d = _ggml_new_tensor_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_i32(
    ffi.Pointer<ggml_context> ctx,
    int value,
  ) {
    return _ggml_new_i32(
      ctx,
      value,
    );
  }

  late final _ggml_new_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Int32)>>('ggml_new_i32');
  late final _ggml_new_i32 = _ggml_new_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_f32(
    ffi.Pointer<ggml_context> ctx,
    double value,
  ) {
    return _ggml_new_f32(
      ctx,
      value,
    );
  }

  late final _ggml_new_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Float)>>('ggml_new_f32');
  late final _ggml_new_f32 = _ggml_new_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, double)>();

  ffi.Pointer<ggml_tensor> ggml_dup_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_dup_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_dup_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup_tensor');
  late final _ggml_dup_tensor = _ggml_dup_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_view_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_view_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_view_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_view_tensor');
  late final _ggml_view_tensor = _ggml_view_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_set_zero(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_zero(
      tensor,
    );
  }

  late final _ggml_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_set_zero');
  late final _ggml_set_zero = _ggml_set_zeroPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_set_i32(
    ffi.Pointer<ggml_tensor> tensor,
    int value,
  ) {
    return _ggml_set_i32(
      tensor,
      value,
    );
  }

  late final _ggml_set_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Int32)>>('ggml_set_i32');
  late final _ggml_set_i32 = _ggml_set_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_f32(
    ffi.Pointer<ggml_tensor> tensor,
    double value,
  ) {
    return _ggml_set_f32(
      tensor,
      value,
    );
  }

  late final _ggml_set_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_set_f32');
  late final _ggml_set_f32 = _ggml_set_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, double)>();

  int ggml_get_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_i32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_i32_1d');
  late final _ggml_get_i32_1d = _ggml_get_i32_1dPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>, int)>();

  void ggml_set_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    int value,
  ) {
    return _ggml_set_i32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Int32)>>('ggml_set_i32_1d');
  late final _ggml_set_i32_1d = _ggml_set_i32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, int)>();

  double ggml_get_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_f32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_f32_1d');
  late final _ggml_get_f32_1d = _ggml_get_f32_1dPtr
      .asFunction<double Function(ffi.Pointer<ggml_tensor>, int)>();

  void ggml_set_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    double value,
  ) {
    return _ggml_set_f32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Float)>>('ggml_set_f32_1d');
  late final _ggml_set_f32_1d = _ggml_set_f32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, double)>();

  ffi.Pointer<ffi.Void> ggml_get_data(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data(
      tensor,
    );
  }

  late final _ggml_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data');
  late final _ggml_get_data = _ggml_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ffi.Float> ggml_get_data_f32(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data_f32(
      tensor,
    );
  }

  late final _ggml_get_data_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data_f32');
  late final _ggml_get_data_f32 = _ggml_get_data_f32Ptr
      .asFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_dup(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_dup(
      ctx,
      a,
    );
  }

  late final _ggml_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup');
  late final _ggml_dup = _ggml_dupPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_add');
  late final _ggml_add = _ggml_addPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sub(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_sub(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_sub');
  late final _ggml_sub = _ggml_subPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mul(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_mul');
  late final _ggml_mul = _ggml_mulPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_div(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_div(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_div');
  late final _ggml_div = _ggml_divPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqr(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqr(
      ctx,
      a,
    );
  }

  late final _ggml_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqr');
  late final _ggml_sqr = _ggml_sqrPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqrt(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqrt(
      ctx,
      a,
    );
  }

  late final _ggml_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqrt');
  late final _ggml_sqrt = _ggml_sqrtPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sum(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sum(
      ctx,
      a,
    );
  }

  late final _ggml_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sum');
  late final _ggml_sum = _ggml_sumPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mean(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_mean(
      ctx,
      a,
    );
  }

  late final _ggml_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mean');
  late final _ggml_mean = _ggml_meanPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_repeat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_repeat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_repeat');
  late final _ggml_repeat = _ggml_repeatPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_abs(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_abs(
      ctx,
      a,
    );
  }

  late final _ggml_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_abs');
  late final _ggml_abs = _ggml_absPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sgn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sgn(
      ctx,
      a,
    );
  }

  late final _ggml_sgnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sgn');
  late final _ggml_sgn = _ggml_sgnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_neg(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_neg(
      ctx,
      a,
    );
  }

  late final _ggml_negPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_neg');
  late final _ggml_neg = _ggml_negPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_step(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_step(
      ctx,
      a,
    );
  }

  late final _ggml_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_step');
  late final _ggml_step = _ggml_stepPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_relu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_relu(
      ctx,
      a,
    );
  }

  late final _ggml_reluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_relu');
  late final _ggml_relu = _ggml_reluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu(
      ctx,
      a,
    );
  }

  late final _ggml_geluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu');
  late final _ggml_gelu = _ggml_geluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_silu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_silu(
      ctx,
      a,
    );
  }

  late final _ggml_siluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu');
  late final _ggml_silu = _ggml_siluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_norm(
      ctx,
      a,
    );
  }

  late final _ggml_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_norm');
  late final _ggml_norm = _ggml_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_rms_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_rms_norm(
      ctx,
      a,
    );
  }

  late final _ggml_rms_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_rms_norm');
  late final _ggml_rms_norm = _ggml_rms_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mul_mat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul_mat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_mat');
  late final _ggml_mul_mat = _ggml_mul_matPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_scale(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_scale(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_scale');
  late final _ggml_scale = _ggml_scalePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cpy(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cpy(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_cpy');
  late final _ggml_cpy = _ggml_cpyPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_reshape(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_reshape(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_reshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_reshape');
  late final _ggml_reshape = _ggml_reshapePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
  ) {
    return _ggml_reshape_2d(
      ctx,
      a,
      ne0,
      ne1,
    );
  }

  late final _ggml_reshape_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int)>>('ggml_reshape_2d');
  late final _ggml_reshape_2d = _ggml_reshape_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_reshape_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_reshape_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_reshape_3d');
  late final _ggml_reshape_3d = _ggml_reshape_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int offset,
  ) {
    return _ggml_view_1d(
      ctx,
      a,
      ne0,
      offset,
    );
  }

  late final _ggml_view_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Size)>>('ggml_view_1d');
  late final _ggml_view_1d = _ggml_view_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int nb1,
    int offset,
  ) {
    return _ggml_view_2d(
      ctx,
      a,
      ne0,
      ne1,
      nb1,
      offset,
    );
  }

  late final _ggml_view_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Size,
              ffi.Size)>>('ggml_view_2d');
  late final _ggml_view_2d = _ggml_view_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_permute(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int axis0,
    int axis1,
    int axis2,
    int axis3,
  ) {
    return _ggml_permute(
      ctx,
      a,
      axis0,
      axis1,
      axis2,
      axis3,
    );
  }

  late final _ggml_permutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_permute');
  late final _ggml_permute = _ggml_permutePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_transpose(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_transpose(
      ctx,
      a,
    );
  }

  late final _ggml_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_transpose');
  late final _ggml_transpose = _ggml_transposePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_get_rows(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_get_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_rows');
  late final _ggml_get_rows = _ggml_get_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_inf(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_inf(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_infPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_diag_mask_inf');
  late final _ggml_diag_mask_inf = _ggml_diag_mask_infPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_soft_max(
      ctx,
      a,
    );
  }

  late final _ggml_soft_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max');
  late final _ggml_soft_max = _ggml_soft_maxPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_rope(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
    int n_dims,
    int mode,
  ) {
    return _ggml_rope(
      ctx,
      a,
      n_past,
      n_dims,
      mode,
    );
  }

  late final _ggml_ropePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_rope');
  late final _ggml_rope = _ggml_ropePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d_1s(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_conv_1d_1s(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_conv_1d_1sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_conv_1d_1s');
  late final _ggml_conv_1d_1s = _ggml_conv_1d_1sPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d_2s(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_conv_1d_2s(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_conv_1d_2sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_conv_1d_2s');
  late final _ggml_conv_1d_2s = _ggml_conv_1d_2sPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_flash_attn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    bool masked,
  ) {
    return _ggml_flash_attn(
      ctx,
      q,
      k,
      v,
      masked,
    );
  }

  late final _ggml_flash_attnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Bool)>>('ggml_flash_attn');
  late final _ggml_flash_attn = _ggml_flash_attnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          bool)>();

  ffi.Pointer<ggml_tensor> ggml_flash_ff(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b0,
    ffi.Pointer<ggml_tensor> b1,
    ffi.Pointer<ggml_tensor> c0,
    ffi.Pointer<ggml_tensor> c1,
  ) {
    return _ggml_flash_ff(
      ctx,
      a,
      b0,
      b1,
      c0,
      c1,
    );
  }

  late final _ggml_flash_ffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_flash_ff');
  late final _ggml_flash_ff = _ggml_flash_ffPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  void ggml_set_param(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_param(
      ctx,
      tensor,
    );
  }

  late final _ggml_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_set_param');
  late final _ggml_set_param = _ggml_set_paramPtr.asFunction<
      void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  void ggml_build_forward_expand(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_build_forward_expand(
      cgraph,
      tensor,
    );
  }

  late final _ggml_build_forward_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_build_forward_expand');
  late final _ggml_build_forward_expand =
      _ggml_build_forward_expandPtr.asFunction<
          void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  ggml_cgraph ggml_build_forward(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_build_forward(
      tensor,
    );
  }

  late final _ggml_build_forwardPtr = _lookup<
          ffi.NativeFunction<ggml_cgraph Function(ffi.Pointer<ggml_tensor>)>>(
      'ggml_build_forward');
  late final _ggml_build_forward = _ggml_build_forwardPtr
      .asFunction<ggml_cgraph Function(ffi.Pointer<ggml_tensor>)>();

  ggml_cgraph ggml_build_backward(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> gf,
    bool keep,
  ) {
    return _ggml_build_backward(
      ctx,
      gf,
      keep,
    );
  }

  late final _ggml_build_backwardPtr = _lookup<
      ffi.NativeFunction<
          ggml_cgraph Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>, ffi.Bool)>>('ggml_build_backward');
  late final _ggml_build_backward = _ggml_build_backwardPtr.asFunction<
      ggml_cgraph Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>, bool)>();

  void ggml_graph_compute(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_compute(
      ctx,
      cgraph,
    );
  }

  late final _ggml_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>)>>('ggml_graph_compute');
  late final _ggml_graph_compute = _ggml_graph_computePtr.asFunction<
      void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_reset(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_reset(
      cgraph,
    );
  }

  late final _ggml_graph_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_reset');
  late final _ggml_graph_reset = _ggml_graph_resetPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_print(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_print(
      cgraph,
    );
  }

  late final _ggml_graph_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_print');
  late final _ggml_graph_print = _ggml_graph_printPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_dump_dot(
    ffi.Pointer<ggml_cgraph> gb,
    ffi.Pointer<ggml_cgraph> gf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _ggml_graph_dump_dot(
      gb,
      gf,
      filename,
    );
  }

  late final _ggml_graph_dump_dotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_dump_dot');
  late final _ggml_graph_dump_dot = _ggml_graph_dump_dotPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ffi.Char>)>();

  ggml_opt_params ggml_opt_default_params(
    int type,
  ) {
    return _ggml_opt_default_params(
      type,
    );
  }

  late final _ggml_opt_default_paramsPtr =
      _lookup<ffi.NativeFunction<ggml_opt_params Function(ffi.Int32)>>(
          'ggml_opt_default_params');
  late final _ggml_opt_default_params =
      _ggml_opt_default_paramsPtr.asFunction<ggml_opt_params Function(int)>();

  int ggml_opt(
    ffi.Pointer<ggml_context> ctx,
    ggml_opt_params params,
    ffi.Pointer<ggml_tensor> f,
  ) {
    return _ggml_opt(
      ctx,
      params,
      f,
    );
  }

  late final _ggml_optPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ggml_context>, ggml_opt_params,
              ffi.Pointer<ggml_tensor>)>>('ggml_opt');
  late final _ggml_opt = _ggml_optPtr.asFunction<
      int Function(ffi.Pointer<ggml_context>, ggml_opt_params,
          ffi.Pointer<ggml_tensor>)>();

  int ggml_cpu_has_avx() {
    return _ggml_cpu_has_avx();
  }

  late final _ggml_cpu_has_avxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx');
  late final _ggml_cpu_has_avx =
      _ggml_cpu_has_avxPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx2() {
    return _ggml_cpu_has_avx2();
  }

  late final _ggml_cpu_has_avx2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx2');
  late final _ggml_cpu_has_avx2 =
      _ggml_cpu_has_avx2Ptr.asFunction<int Function()>();

  int ggml_cpu_has_avx512() {
    return _ggml_cpu_has_avx512();
  }

  late final _ggml_cpu_has_avx512Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx512');
  late final _ggml_cpu_has_avx512 =
      _ggml_cpu_has_avx512Ptr.asFunction<int Function()>();

  int ggml_cpu_has_fma() {
    return _ggml_cpu_has_fma();
  }

  late final _ggml_cpu_has_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fma');
  late final _ggml_cpu_has_fma =
      _ggml_cpu_has_fmaPtr.asFunction<int Function()>();

  int ggml_cpu_has_neon() {
    return _ggml_cpu_has_neon();
  }

  late final _ggml_cpu_has_neonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_neon');
  late final _ggml_cpu_has_neon =
      _ggml_cpu_has_neonPtr.asFunction<int Function()>();

  int ggml_cpu_has_arm_fma() {
    return _ggml_cpu_has_arm_fma();
  }

  late final _ggml_cpu_has_arm_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_arm_fma');
  late final _ggml_cpu_has_arm_fma =
      _ggml_cpu_has_arm_fmaPtr.asFunction<int Function()>();

  int ggml_cpu_has_f16c() {
    return _ggml_cpu_has_f16c();
  }

  late final _ggml_cpu_has_f16cPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_f16c');
  late final _ggml_cpu_has_f16c =
      _ggml_cpu_has_f16cPtr.asFunction<int Function()>();

  int ggml_cpu_has_fp16_va() {
    return _ggml_cpu_has_fp16_va();
  }

  late final _ggml_cpu_has_fp16_vaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fp16_va');
  late final _ggml_cpu_has_fp16_va =
      _ggml_cpu_has_fp16_vaPtr.asFunction<int Function()>();

  int ggml_cpu_has_wasm_simd() {
    return _ggml_cpu_has_wasm_simd();
  }

  late final _ggml_cpu_has_wasm_simdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_wasm_simd');
  late final _ggml_cpu_has_wasm_simd =
      _ggml_cpu_has_wasm_simdPtr.asFunction<int Function()>();

  int ggml_cpu_has_blas() {
    return _ggml_cpu_has_blas();
  }

  late final _ggml_cpu_has_blasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_blas');
  late final _ggml_cpu_has_blas =
      _ggml_cpu_has_blasPtr.asFunction<int Function()>();

  int ggml_cpu_has_sse3() {
    return _ggml_cpu_has_sse3();
  }

  late final _ggml_cpu_has_sse3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_sse3');
  late final _ggml_cpu_has_sse3 =
      _ggml_cpu_has_sse3Ptr.asFunction<int Function()>();

  int ggml_cpu_has_vsx() {
    return _ggml_cpu_has_vsx();
  }

  late final _ggml_cpu_has_vsxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_vsx');
  late final _ggml_cpu_has_vsx =
      _ggml_cpu_has_vsxPtr.asFunction<int Function()>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class max_align_t extends ffi.Opaque {}

typedef ggml_fp16_t = ffi.Uint16;

final class ggml_object extends ffi.Opaque {}

final class ggml_context extends ffi.Opaque {}

abstract class ggml_type {
  static const int GGML_TYPE_Q4_0 = 0;
  static const int GGML_TYPE_Q4_1 = 1;
  static const int GGML_TYPE_I8 = 2;
  static const int GGML_TYPE_I16 = 3;
  static const int GGML_TYPE_I32 = 4;
  static const int GGML_TYPE_F16 = 5;
  static const int GGML_TYPE_F32 = 6;
  static const int GGML_TYPE_COUNT = 7;
}

abstract class ggml_op {
  static const int GGML_OP_NONE = 0;
  static const int GGML_OP_DUP = 1;
  static const int GGML_OP_ADD = 2;
  static const int GGML_OP_SUB = 3;
  static const int GGML_OP_MUL = 4;
  static const int GGML_OP_DIV = 5;
  static const int GGML_OP_SQR = 6;
  static const int GGML_OP_SQRT = 7;
  static const int GGML_OP_SUM = 8;
  static const int GGML_OP_MEAN = 9;
  static const int GGML_OP_REPEAT = 10;
  static const int GGML_OP_ABS = 11;
  static const int GGML_OP_SGN = 12;
  static const int GGML_OP_NEG = 13;
  static const int GGML_OP_STEP = 14;
  static const int GGML_OP_RELU = 15;
  static const int GGML_OP_GELU = 16;
  static const int GGML_OP_SILU = 17;
  static const int GGML_OP_NORM = 18;
  static const int GGML_OP_RMS_NORM = 19;
  static const int GGML_OP_MUL_MAT = 20;
  static const int GGML_OP_SCALE = 21;
  static const int GGML_OP_CPY = 22;
  static const int GGML_OP_RESHAPE = 23;
  static const int GGML_OP_VIEW = 24;
  static const int GGML_OP_PERMUTE = 25;
  static const int GGML_OP_TRANSPOSE = 26;
  static const int GGML_OP_GET_ROWS = 27;
  static const int GGML_OP_DIAG_MASK_INF = 28;
  static const int GGML_OP_SOFT_MAX = 29;
  static const int GGML_OP_ROPE = 30;
  static const int GGML_OP_CONV_1D_1S = 31;
  static const int GGML_OP_CONV_1D_2S = 32;
  static const int GGML_OP_FLASH_ATTN = 33;
  static const int GGML_OP_FLASH_FF = 34;
  static const int GGML_OP_COUNT = 35;
}

final class ggml_tensor extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int()
  external int n_dims;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> ne;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Size> nb;

  @ffi.Int32()
  external int op;

  @ffi.Bool()
  external bool is_param;

  external ffi.Pointer<ggml_tensor> grad;

  external ffi.Pointer<ggml_tensor> src0;

  external ffi.Pointer<ggml_tensor> src1;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ggml_tensor>> opt;

  @ffi.Int()
  external int n_tasks;

  @ffi.Int()
  external int perf_runs;

  @ffi.Int64()
  external int perf_cycles;

  @ffi.Int64()
  external int perf_time_us;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> padding;
}

final class ggml_cgraph extends ffi.Struct {
  @ffi.Int()
  external int n_nodes;

  @ffi.Int()
  external int n_leafs;

  @ffi.Int()
  external int n_threads;

  @ffi.Size()
  external int work_size;

  external ffi.Pointer<ggml_tensor> work;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Pointer<ggml_tensor>> nodes;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Pointer<ggml_tensor>> grads;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Pointer<ggml_tensor>> leafs;

  @ffi.Int()
  external int perf_runs;

  @ffi.Int64()
  external int perf_cycles;

  @ffi.Int64()
  external int perf_time_us;
}

final class ggml_scratch extends ffi.Struct {
  @ffi.Size()
  external int offs;

  @ffi.Size()
  external int size;

  external ffi.Pointer<ffi.Void> data;
}

final class ggml_init_params extends ffi.Struct {
  @ffi.Size()
  external int mem_size;

  external ffi.Pointer<ffi.Void> mem_buffer;
}

abstract class ggml_opt_type {
  static const int GGML_OPT_ADAM = 0;
  static const int GGML_OPT_LBFGS = 1;
}

abstract class ggml_linesearch {
  static const int GGML_LINESEARCH_DEFAULT = 1;
  static const int GGML_LINESEARCH_BACKTRACKING_ARMIJO = 0;
  static const int GGML_LINESEARCH_BACKTRACKING_WOLFE = 1;
  static const int GGML_LINESEARCH_BACKTRACKING_STRONG_WOLFE = 2;
}

abstract class ggml_opt_result {
  static const int GGML_OPT_OK = 0;
  static const int GGML_OPT_DID_NOT_CONVERGE = 1;
  static const int GGML_OPT_NO_CONTEXT = 2;
  static const int GGML_OPT_INVALID_WOLFE = 3;
  static const int GGML_OPT_FAIL = 4;
  static const int GGML_LINESEARCH_FAIL = -128;
  static const int GGML_LINESEARCH_MINIMUM_STEP = -127;
  static const int GGML_LINESEARCH_MAXIMUM_STEP = -126;
  static const int GGML_LINESEARCH_MAXIMUM_ITERATIONS = -125;
  static const int GGML_LINESEARCH_INVALID_PARAMETERS = -124;
}

final class ggml_opt_params extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int()
  external int n_threads;

  @ffi.Int()
  external int past;

  @ffi.Float()
  external double delta;

  @ffi.Int()
  external int max_no_improvement;

  @ffi.Bool()
  external bool print_forward_graph;

  @ffi.Bool()
  external bool print_backward_graph;

  external UnnamedStruct1 adam;

  external UnnamedStruct2 lbfgs;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int()
  external int n_iter;

  @ffi.Float()
  external double alpha;

  @ffi.Float()
  external double beta1;

  @ffi.Float()
  external double beta2;

  @ffi.Float()
  external double eps;

  @ffi.Float()
  external double eps_f;

  @ffi.Float()
  external double eps_g;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int()
  external int m;

  @ffi.Int()
  external int n_iter;

  @ffi.Int()
  external int max_linesearch;

  @ffi.Float()
  external double eps;

  @ffi.Float()
  external double ftol;

  @ffi.Float()
  external double wolfe;

  @ffi.Float()
  external double min_step;

  @ffi.Float()
  external double max_step;

  @ffi.Int32()
  external int linesearch;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 37;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int GGML_MAX_DIMS = 4;

const int GGML_MAX_NODES = 4096;

const int GGML_MAX_PARAMS = 16;

const int GGML_MAX_CONTEXTS = 64;

const int GGML_MAX_OPT = 4;
